{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "phaser/src/constants.js",
    "phaser/src/index.js",
    "phaser/src/objects/Ant.js",
    "phaser/src/objects/Cell.js",
    "phaser/src/objects/Grid.js",
    "phaser/src/objects/History.js",
    "phaser/src/states/GameState.js",
    "phaser/src/utils.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "export const CellWidth = 50;\nexport const ElapsedTime = 500;\nexport const SizeTerrain = 51;\nexport const AntsColor = [\n\t\"brown\",\n\t\"red\",\n\t\"yellow\",\n\t\"grey\"\n];\n\nexport function convertToNumberColor(color) {\n\tif(!AntsColor.includes(color)) {\n\t\treturn 0;\n\t}\n\treturn AntsColor.indexOf(color);\n}\n\nexport const WidthCanvas = 800;\nexport const HeighCanvas = 600;",
    "import GameState from './states/GameState';\nimport { WidthCanvas, HeighCanvas}  from './constants';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\tsuper(WidthCanvas, HeighCanvas, Phaser.AUTO, 'content', null);\n\t\tthis.state.add('GameState', GameState, false);\n\t\tthis.state.start('GameState');\n\t}\n\n}\n\nnew Game();\n",
    "import { CellWidth, ElapsedTime, AntsColor, convertToNumberColor } from '../constants';\nimport { mod } from \"../utils\";\n\nconst Tilt = 90;\nclass Ant extends Phaser.Sprite{\n\n  constructor(game, x, y, antColor = AntsColor[0]) {\n    const convertToColorFn = (number) => {\n      return convertToNumberColor(antColor) * 3 + number;\n    };\n\n    super(game, x, y, \"ant\", convertToColorFn(0));\n    this.antRotation = 90;\n\n    const downArray = [0, 1, 2].map(convertToColorFn);\n    const leftArray = [12, 13, 14].map(convertToColorFn);\n    const rightArray = [24, 25, 26].map(convertToColorFn);\n    const upArray = [36, 37, 38].map(convertToColorFn);\n\n    this.animations.add('down', downArray, 10, true);\n    this.animations.add('left', leftArray, 10, true);\n    this.animations.add('right', rightArray, 10, true);\n    this.animations.add('up', upArray , 10, true);\n\n    this.game = game;\n\t}\n\n  rotate(direction) {\n    const newRotation = direction > 0 ? (this.antRotation + Tilt) : (this.antRotation - Tilt);\n    this.antRotation = mod(newRotation, 360);\n  }\n\n  goTo(xPos, yPos) {\n    this.animations.stop(\"down\");\n    this.animations.stop(\"up\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"right\");\n    this.x = xPos;\n    this.y = yPos;\n    \n  }\n\n  updateAnt(cell) {\n    if(cell.isChecked()) {\n      this.rotate(1);\n    } else {\n      this.rotate(-1);\n    }\n    switch(this.antRotation) {\n      case 0:\n        this.turnRight();\n      break;\n      case 90:\n        this.goUp();\n      break;\n      case 180:\n        this.turnLeft();\n      break;\n      case 270:\n        this.goDown();\n      break;\n    }\n  }\n\n  goDown() {\n    const position = this.y + CellWidth;\n    this.game.add.tween(this).to( { y: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"down\", 45, true);\n    this.animations.stop(\"up\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"right\");\n  }\n\n  goUp() {\n    const position = this.y - CellWidth;\n    this.game.add.tween(this).to( { y: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"up\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"right\");\n  }\n\n  turnLeft() {\n    const position = this.x - CellWidth;\n    this.game.add.tween(this).to( { x: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"left\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"up\");\n    this.animations.stop(\"right\");\n  }\n\n  turnRight() {\n    const position = this.x + CellWidth;\n    this.game.add.tween(this).to( { x: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"right\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"up\");\n  }\n}\n\nexport default Ant;",
    "const GreyColor = 0xCAC8C8;\nconst WhiteColor = 0xFFFFFFF;\n\nclass Cell extends Phaser.Graphics{\n\n\tconstructor(game, x, y, width, height, color= 0xFFFFFFF, lineColor = 0x000000) {\n\t\tsuper(game, 0, 0);\n\t\tthis.beginFill(color);\n\t\tthis.lineStyle(2, lineColor, 1);\n    this.drawRect(x, y, width, height);\n    this.checked = false;\n    this.realPosition = {x, y};\n\t  this.lineColor = lineColor;\n    this.color = color;\n  }\n\n  toggle() {\n    this.checked = !this.checked;\n    this.draw();\n  }\n\n  draw() {\n    const newColor = this.checked ? GreyColor: WhiteColor;\n    this.beginFill(newColor);\n    this.lineStyle(2, this.lineColor, 1);\n    this.drawRect(this.realPosition.x, this.realPosition.y, this.width, this.height);\n  }\n\n  isChecked() {\n    return this.checked;\n  }\n}\n\nexport default Cell;",
    "import Cell from '../objects/Cell';\nimport { CellWidth } from \"../constants\"\n\nclass Grid extends Phaser.Group {\n\n\tconstructor(game, nbRow, nbColumn, cellSize, xOrigin = 0, yOrigin = 0, cellColor = 0xFFFFFFF, gridColor = 0x000000) {\n\t\tsuper(game);\n\t\tthis.nbRow = nbRow;\n\t\tthis.nbColumn = nbColumn;\n\t\tfor(let y = 0; y < nbColumn; ++y) {\n\t\t\tfor(let x = 0; x < nbRow; ++x) {\n\t\t\t\tthis.add( new Cell(game, x * cellSize + xOrigin, y * cellSize + yOrigin, cellSize, cellSize, cellColor, gridColor) );\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCell(rowIndex, columnIndex) {\n\t\tif(rowIndex > this.nbRow || columnIndex > this.nbColumn) {\n\t\t\tconsole.error(\"Grid::getCell out of border\");\n\t\t\treturn null;\n\t\t}\n\t\tconst index = rowIndex + columnIndex * this.nbColumn;\n\t\treturn this.getAt( index );\n\t}\n\n\tgetCellAtPosition(x, y) {\n\t\tconst indexX = Math.trunc( x / CellWidth );\n\t\tconst indexY = Math.trunc( y / CellWidth );\n\t\treturn this.getCell( indexX, indexY );\n\t\t\n\t}\n\n  setStates(arrayState) {\n    arrayState.forEach((value, index) => {\n      this.children[index].checked = value;\n      this.children[index].draw(); \n    });\n  }\n\n\tgetCellsArray() {\n\t\treturn this.children.map(cell => {\n\t\t\treturn cell.checked;\n\t\t});\n\t}\n\n}\n\nexport default Grid;",
    "//only work for one ant\nclass History {\n\n  constructor() {\n    this.record = [];\n    this.isRecording = false;\n  }\n\n  start() {\n    this.isRecording = true;\n  }\n\n  reset() {\n    this.record =  [];\n    this.isRecording = false;\n  }\n\n  stop() {\n    this.isRecording = false;\n  }\n\n  recordStep(step, ant, gridArray) {\n    const { x, y } = ant;\n    if(this.isRecording) {\n      this.record[step] = { x, y, grid: gridArray };\n    }\n  }\n\n  getTo(step) {\n    if(!this.record[step]) {\n      return null;\n    }\n    return this.record[step];\n  }\n  \n}\n\nexport default History;",
    "import Grid from '../objects/Grid';\nimport Ant from '../objects/Ant';\nimport History from '../objects/History';\n\nimport { CellWidth, ElapsedTime, SizeTerrain, WidthCanvas, HeighCanvas } from '../constants';\n\nconst CameraVelocity = 10;\nconst Bounds = CellWidth * SizeTerrain;\n\nclass GameState extends Phaser.State {\n\n\tcreate() {\n\t\tthis.game.world.setBounds(0, 0, Bounds, Bounds);\n\t\tthis.gridLayout = new Grid(this.game, Bounds/ CellWidth, Bounds/CellWidth, CellWidth);\n\t\tthis.cursors = this.game.input.keyboard.createCursorKeys();\n\n\t\tthis.ant = new Ant(this.game, 0, 0, \"red\");\n\t\tthis.game.add.existing(this.ant);\n\n\t\tthis.textStep = this.game.add.text(this.game.world.width * 0.01, this.game.world.height * 0.01, \"Steps: \", { font: \"18px Arial\", fill: \"#0000FF\", align: \"center\" });\n\t\tthis.textStep.fixedToCamera = true;\n\t\tthis.setAntCenter();\n\n\t\tthis.steps = 0;\n\t\tthis.timer = this.game.time.create(false);\n\t\tthis.timer.add(window.ElapsedTime || ElapsedTime, this.updatePosition, this);\n\t\tthis.timer.start();\n\n        this.game.time.advancedTiming = true;\n\n\t    this.replay = new History();\n\t\tthis.replay.start();\n    \tthis.replay.recordStep(this.steps, this.ant, this.gridLayout.getCellsArray());\n\n    this.initCamera();\n\t}\n\n  initCamera() {\n    this.game.camera.x = this.game.world.width / 2 - WidthCanvas / 2;\n    this.game.camera.y = this.game.world.height / 2 - HeighCanvas / 2;\n  }\n\n\tsetAntCenter() {\n\t\tconst indexX = Math.trunc( (Bounds / CellWidth) / 2 );\n\t\tconst indexY = Math.trunc( (Bounds / CellWidth) / 2 );\n    this.setAntOnCell(indexX, indexY);\n\t}\n\n\tsetAntOnCell(indexX, indexY) {\n\t\tconst cell = this.gridLayout.getCell(indexX, indexY);\n\t\tthis.ant.x = cell.realPosition.x + CellWidth / 2 - this.ant.width / 2;\n\t\tthis.ant.y = cell.realPosition.y + CellWidth / 2 - this.ant.height / 2;\n\t}\n\n\tpreload() {\n    this.game.stage.disableVisibilityChange = true;\n    this.game.load.spritesheet('ant', 'res/ants.png', 32, 32);\n  }\n\n\tupdatePosition() {\n    let cell = this.gridLayout.getCellAtPosition( this.ant.x, this.ant.y );\n\t\tthis.ant.updateAnt(cell);\n\t\tcell.toggle();\n\t\tthis.steps += 1;\n\t\tthis.textStep.text = \"Steps :\" + this.steps;\n\t\tthis.timer.add(window.ElapsedTime || ElapsedTime, this.updatePosition, this);\n\t\tthis.replay.recordStep(this.steps, this.ant, this.gridLayout.getCellsArray());\n\t}\n\n  setSimulationTo(step) {\n    const simulationData = this.replay.getTo(step);\n    this.gridLayout.setStates(simulationData.grid);\n    this.ant.goTo(simulationData.x, simulationData.y);\n    this.steps = step;\n  }\n\n\tupdate() {\n\n\t    if (this.cursors.up.isDown)\n\t    {\n\t      this.game.camera.y -= CameraVelocity;\n\t    }\n\t    else if (this.cursors.down.isDown)\n\t    {\n\t      this.game.camera.y += CameraVelocity;\n\t    }\n\n\t    if (this.cursors.left.isDown)\n\t    {\n\t    \tthis.game.camera.x -= CameraVelocity;\n\t    }\n\t    else if (this.cursors.right.isDown)\n\t    {\n\t    \tthis.game.camera.x += CameraVelocity;\n\t    }\n\t}\n\n\trender() {\n\t\t//this.game.debug.spriteBounds(this.ant);\n        this.game.debug.text(this.game.time.fps, 2, 14, \"#00ff00\");\n\t}\n\n\n}\n\nexport default GameState;\n",
    "export function mod(a, b) {\n    return ((a % b) + b) % b;\n}"
  ]
}